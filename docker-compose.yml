services:
  web:
    build: .
    command: bundle exec rails s -p 3000 -b '0.0.0.0'
    volumes:
      - .:/app
    ports:
      # This port only needs to be exposed for local development.
      # In production, the web container is behind a reverse proxy (Caddy).
      - "3000:3000"
    depends_on:
      - db
    env_file:
      - .env
  sidekiq:
    build: .
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
  db:
    image: postgres:13
    volumes:
      - pg_data:/var/lib/postgresql/data
    env_file:
      - .env
  redis:
    image: redis:6.2-alpine
    volumes:
      - redis_data:/data
  # Use either Caddy or Ngrok but not both at the same time.
  # Set HOST_MODE to "caddy" or "ngrok" in the .env file.
  # Uncomment the Caddy service and comment out the Ngrok service to use Caddy, and vice versa.
  caddy:
    image: caddy:2-alpine
    command: ["caddy", "run", "--config", "/etc/caddy/Caddyfile", "--adapter", "caddyfile"]
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    env_file:
      - .env
    environment:
      HOSTNAME: "${HOSTNAME}"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddyfile:/etc/caddy/Caddyfile
  # ngrok:
  #   image: ngrok/ngrok:latest
  #   restart: unless-stopped
  #   depends_on:
  #     - web
  #   command: http web:3000
  #   env_file:
  #     # Make sure your NGROK_AUTHTOKEN is set in the .env file, and HOST_MODE is set to "ngrok".
  #     - .env
  # # For development only
  mailcatcher:
    image: sj26/mailcatcher
    ports: ["1080:1080"]
    environment:
      MAILCATCHER_SMTP_PORT: 1025
      MAILCATCHER_HTTP_PORT: 1080

volumes:
  pg_data:
  redis_data:
  caddy_data:
  caddy_config: